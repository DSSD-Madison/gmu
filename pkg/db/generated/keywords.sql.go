// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: keywords.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findKeywordByName = `-- name: FindKeywordByName :one
SELECT id, name FROM keywords WHERE LOWER(name) = LOWER($1) LIMIT 1
`

func (q *Queries) FindKeywordByName(ctx context.Context, lower string) (Keyword, error) {
	row := q.db.QueryRowContext(ctx, findKeywordByName, lower)
	var i Keyword
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertKeyword = `-- name: InsertKeyword :exec
INSERT INTO keywords (id, name) VALUES ($1, $2)
`

type InsertKeywordParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) InsertKeyword(ctx context.Context, arg InsertKeywordParams) error {
	_, err := q.db.ExecContext(ctx, insertKeyword, arg.ID, arg.Name)
	return err
}

const listAllKeywords = `-- name: ListAllKeywords :many
SELECT id, name FROM keywords ORDER BY name
`

func (q *Queries) ListAllKeywords(ctx context.Context) ([]Keyword, error) {
	rows, err := q.db.QueryContext(ctx, listAllKeywords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchKeywordsByNamePrefix = `-- name: SearchKeywordsByNamePrefix :many
SELECT
    id,
    name
FROM
    keywords
WHERE
    name ILIKE $1 || '%'
ORDER BY
    name
    LIMIT 10
`

func (q *Queries) SearchKeywordsByNamePrefix(ctx context.Context, dollar_1 sql.NullString) ([]Keyword, error) {
	rows, err := q.db.QueryContext(ctx, searchKeywordsByNamePrefix, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
