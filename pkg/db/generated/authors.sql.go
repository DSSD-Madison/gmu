// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: authors.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findAuthorByName = `-- name: FindAuthorByName :one
SELECT id, name FROM authors WHERE LOWER(name) = LOWER($1) LIMIT 1
`

func (q *Queries) FindAuthorByName(ctx context.Context, lower string) (Author, error) {
	row := q.db.QueryRowContext(ctx, findAuthorByName, lower)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertAuthor = `-- name: InsertAuthor :exec
INSERT INTO authors (id, name) VALUES ($1, $2)
`

type InsertAuthorParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) InsertAuthor(ctx context.Context, arg InsertAuthorParams) error {
	_, err := q.db.ExecContext(ctx, insertAuthor, arg.ID, arg.Name)
	return err
}

const listAllAuthors = `-- name: ListAllAuthors :many

SELECT id, name FROM authors ORDER BY name
`

// Optional: limit the number of results (good for autocomplete)
func (q *Queries) ListAllAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAuthorsByNamePrefix = `-- name: SearchAuthorsByNamePrefix :many
SELECT
    id,
    name
FROM
    authors
WHERE
    name ILIKE $1 || '%'  -- Case-insensitive prefix search
ORDER BY
    name -- Optional: order results alphabetically
    LIMIT 10
`

func (q *Queries) SearchAuthorsByNamePrefix(ctx context.Context, dollar_1 sql.NullString) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, searchAuthorsByNamePrefix, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
