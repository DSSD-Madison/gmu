package components

import (
	"strconv"
	"strings"

	"github.com/DSSD-Madison/gmu/pkg/awskendra"
)

templ ResultsPage(results awskendra.KendraResults, isAuthorized bool) {
	<div id="grid-container" class="pt-10 pr-10 grid grid-cols-[1fr_3fr] grid-rows-[auto_1fr_auto] w-full gap-4">
		@sidecolumn(results)
		<div id="results-and-pagination">
			@ResultsAndPagination(results, true)
		</div>
	</div>
	@Searchbar(results.UrlData, isAuthorized)
	@suggestions_container(true)
}

templ ResultsAndPagination(results awskendra.KendraResults, isAuthorized bool) {
	@ResultsContainer(results, isAuthorized)
    <div class="col-span-2">
		@Pagination(results.PageStatus)
    </div>
}

func nonemptyExpand(result awskendra.KendraResult) bool {
	return len(result.Authors) > 0 || len(result.Regions) > 0 || len(result.Keywords) > 0 || result.PublishDate != "" || len(result.Categories) > 0 || result.Abstract != ""
}

templ ResultCard(result awskendra.KendraResult, isAuthorized bool) {
	// 'relative' is removed from <details> unless needed for other elements
	<details class="group dark:bg-gray-800 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-150 ease-in-out overflow-hidden">

		// Add 'relative' to the <summary> to be the positioning context for the button
		// Add padding-right (e.g., pr-12) to the summary to prevent content overlap with the button
		<summary class="relative list-none cursor-pointer p-4 pr-12 block dark:hover:bg-gray-700 hover:bg-gray-100 transition duration-150 ease-in-out">

			if isAuthorized {
				<a href={ templ.URL("/edit-metadata/" + result.UUID) }
				   title="Edit Result"
				   aria-label="Edit Result"
				   class="absolute top-2 right-2 z-10 p-1.5 rounded-full bg-gray-200 dark:bg-gray-600 text-gray-600 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-500 hover:text-gray-800 dark:hover:text-gray-100 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800">
					// Pencil Icon SVG
					<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
						<path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
					</svg>
				</a>
			}
			// --- End Conditional Edit Link ---

			// Original summary content div
			<div class="flex items-start space-x-4">
				if result.Image != "" {
					<img src={ result.Image } alt="Preview" class="w-24 h-24 object-cover rounded-md flex-shrink-0 border border-gray-100"/>
				} else {
					<div class="w-24 h-24 dark:bg-gray-700 bg-gray-100 rounded-md flex items-center justify-center text-gray-400 text-xs flex-shrink-0 border border-gray-200">
						(No Preview)
					</div>
				}
				<div class="flex-grow min-w-0">
					<a href={ templ.URL(result.Link) } target="_blank" rel="noopener noreferrer" class="text-lg font-semibold dark:text-blue-500 text-blue-700 dark:hover:text-blue-400 hover:text-blue-900 hover:underline">
						{ result.Title }
					</a>
					<div class="mt-1 space-y-1.5">
						for _, excerpt := range result.Excerpts {
							<p class="text-sm text-gray-700 dark:text-gray-400 leading-normal">
								{ excerpt.Text }
								<a
									class="ml-1 text-blue-600 dark:text-blue-500 dark:hover:text-blue-400 hover:text-blue-800 text-xs align-super whitespace-nowrap"
									target="_blank"
									rel="noopener noreferrer"
									if result.Link != "" {
										href={ templ.URL(result.Link + "#page=" + strconv.Itoa(excerpt.PageNum)) }
									}
								>
									[{ strconv.Itoa(excerpt.PageNum) }]
								</a>
							</p>
						}
					</div>
				</div>
				// Chevron (might be slightly pushed left by the summary's padding-right)
				<div class="self-center text-gray-400 group-open:rotate-90 transition-transform duration-300 flex-shrink-0 ml-2">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
					</svg>
				</div>
			</div>
		</summary> // End of Summary

		// Expanded content remains the same
		<div class="px-6 py-4 border-t border-gray-200 dark:border-gray-600 dark:bg-gray-800 bg-gray-50/75">
			<dl class="grid grid-cols-[max-content_1fr] gap-x-3 gap-y-2.5 text-sm">
				if nonemptyExpand(result) {
					if len(result.Authors) > 0 {
						<dt class="font-medium text-gray-500 dark:text-gray-200">Author(s):</dt>
						<dd class="text-gray-800 dark:text-gray-400">{ strings.Join(result.Authors, ", ") }</dd>
					}
					if len(result.Regions) > 0 {
						<dt class="font-medium text-gray-500 dark:text-gray-200">Region(s):</dt>
						<dd class="text-gray-800 dark:text-gray-400">{ strings.Join(result.Regions, ", ") }</dd>
					}
					if len(result.Keywords) > 0 {
						<dt class="font-medium text-gray-500 dark:text-gray-200">Keywords:</dt>
						<dd class="text-gray-800 dark:text-gray-400">{ strings.Join(result.Keywords, ", ") }</dd>
					}
					if result.PublishDate != "" {
						<dt class="font-medium text-gray-500 dark:text-gray-200">Published:</dt>
						<dd class="text-gray-800 dark:text-gray-400">{ result.PublishDate }</dd>
					}
					if len(result.Categories) > 0 {
						<dt class="font-medium text-gray-500 dark:text-gray-200">Category:</dt>
						<dd class="text-gray-800 dark:text-gray-400">{ strings.Join(result.Categories, ", ") }</dd>
					}
					if result.Abstract != "" {
						<div class="col-span-2 pt-2">
							<dt class="font-medium text-gray-500 dark:text-gray-200 mb-1">Abstract:</dt>
							<dd class="text-gray-800 dark:text-gray-400 leading-relaxed">{ result.Abstract }</dd>
						</div>
					}
				} else {
					<dt class="font-medium text-gray-500 dark:text-gray-200 mb-1">No Metadata</dt>
				}
			</dl>
		</div>
	</details>
}

templ ResultsContainer(results awskendra.KendraResults, isAuthorized bool) {
	<div id="results-content-container" class="space-y-6">
		for _, result := range results.Results {
			@ResultCard(result, isAuthorized)
		}
	</div>
}
