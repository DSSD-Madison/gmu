// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: categories.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findCategoryByName = `-- name: FindCategoryByName :one
SELECT id, name FROM categories WHERE LOWER(name) = LOWER($1) LIMIT 1
`

func (q *Queries) FindCategoryByName(ctx context.Context, lower string) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategoryByName, lower)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertCategory = `-- name: InsertCategory :exec
INSERT INTO categories (id, name) VALUES ($1, $2)
`

type InsertCategoryParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) InsertCategory(ctx context.Context, arg InsertCategoryParams) error {
	_, err := q.db.ExecContext(ctx, insertCategory, arg.ID, arg.Name)
	return err
}

const listAllCategories = `-- name: ListAllCategories :many
SELECT id, name FROM categories ORDER BY name
`

func (q *Queries) ListAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCategoriesByNamePrefix = `-- name: SearchCategoriesByNamePrefix :many
SELECT
    id,
    name
FROM
    categories
WHERE
    name ILIKE $1 || '%'
ORDER BY
    name
    LIMIT 10
`

func (q *Queries) SearchCategoriesByNamePrefix(ctx context.Context, dollar_1 sql.NullString) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, searchCategoriesByNamePrefix, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
