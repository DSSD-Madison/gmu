// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: get_document_by_uuid.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findDocumentByID = `-- name: FindDocumentByID :one
SELECT
    d.id, d.file_name, d.title, d.abstract, d.publish_date, d.source, d.indexed_by_kendra, d.s3_file, d.s3_file_preview, d.pdf_link, d.created_at, d.deleted_at, d.has_duplicate,
    COALESCE(ARRAY_AGG(DISTINCT a.name) FILTER (WHERE a.id IS NOT NULL), '{}'::text[]) AS author_names,
    COALESCE(ARRAY_AGG(DISTINCT r.name) FILTER (WHERE r.id IS NOT NULL), '{}'::text[]) AS region_names,
    COALESCE(ARRAY_AGG(DISTINCT k.keyword) FILTER (WHERE k.id IS NOT NULL), '{}'::text[]) AS keyword_names,
    COALESCE(ARRAY_AGG(DISTINCT c.name) FILTER (WHERE c.id IS NOT NULL), '{}'::text[]) AS category_names
FROM
    documents d
        LEFT JOIN doc_authors da ON d.id = da.doc_id
        LEFT JOIN authors a ON da.author_id = a.id
        LEFT JOIN doc_regions dr ON d.id = dr.doc_id
        LEFT JOIN regions r ON dr.region_id = r.id
        LEFT JOIN doc_keywords dk ON d.id = dk.doc_id
        LEFT JOIN keywords k ON dk.keyword_id = k.id
        LEFT JOIN doc_categories dc ON d.id = dc.doc_id
        LEFT JOIN categories c ON dc.category_id = c.id
WHERE
    d.id = $1
GROUP BY
    d.id
`

type FindDocumentByIDRow struct {
	ID              uuid.UUID
	FileName        string
	Title           string
	Abstract        sql.NullString
	PublishDate     sql.NullTime
	Source          sql.NullString
	IndexedByKendra sql.NullBool
	S3File          string
	S3FilePreview   sql.NullString
	PdfLink         sql.NullString
	CreatedAt       sql.NullTime
	DeletedAt       sql.NullTime
	HasDuplicate    bool
	AuthorNames     interface{}
	RegionNames     interface{}
	KeywordNames    interface{}
	CategoryNames   interface{}
}

func (q *Queries) FindDocumentByID(ctx context.Context, id uuid.UUID) (FindDocumentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findDocumentByID, id)
	var i FindDocumentByIDRow
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.Title,
		&i.Abstract,
		&i.PublishDate,
		&i.Source,
		&i.IndexedByKendra,
		&i.S3File,
		&i.S3FilePreview,
		&i.PdfLink,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.HasDuplicate,
		&i.AuthorNames,
		&i.RegionNames,
		&i.KeywordNames,
		&i.CategoryNames,
	)
	return i, err
}
