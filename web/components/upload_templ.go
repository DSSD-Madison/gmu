// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func PDFUpload() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"upload-container\" class=\"flex items-center justify-center min-h-screen bg-gray-100 relative cursor-pointer\"><form id=\"pdf-upload-form\" action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\" class=\"w-full max-w-md p-6 bg-white rounded-lg shadow-md z-10\" hx-encoding=\"multipart/form-data\" hx-post=\"/upload\" hx-target=\"#upload-response\" hx-swap=\"innerHTML\"><div id=\"file-status-display\" class=\"flex flex-col items-center justify-center w-full h-32 px-4 mb-4 text-center transition bg-white border-2 border-gray-300 border-dashed rounded-md\"><span class=\"text-gray-600\">Click anywhere or drag & drop a PDF</span></div><input type=\"file\" id=\"pdf-upload-input\" name=\"pdf\" accept=\"application/pdf\" class=\"hidden\" required> <button type=\"submit\" class=\"w-full px-4 py-2 font-bold text-white bg-blue-500 rounded hover:bg-blue-700 focus:outline-none focus:shadow-outline cursor-pointer\">Upload Selected File</button><div id=\"upload-response\" class=\"mt-4 text-center text-sm\"></div></form><div id=\"page-drag-overlay\" class=\"hidden fixed inset-0 bg-blue-500 bg-opacity-75 z-40 flex items-center justify-center pointer-events-none transition-opacity duration-200\"><span class=\"text-white text-3xl font-bold\">Drop PDF Here</span></div></div><script>\n\t\t\t// Function scope to avoid polluting global namespace (JS comment - OK)\n\t\t\t(function() {\n\t\t\t\t// Check if elements exist before adding listeners (JS comment - OK)\n\t\t\t\tconst uploadContainer = document.getElementById('upload-container');\n\t\t\t\tconst fileInput = document.getElementById('pdf-upload-input');\n\t\t\t\tconst fileStatusDisplaySpan = document.getElementById('file-status-display')?.querySelector('span'); // Safer query (JS comment - OK)\n\t\t\t\tconst overlay = document.getElementById('page-drag-overlay');\n\t\t\t\tconst form = document.getElementById('pdf-upload-form');\n\n\t\t\t\t// Exit if essential elements are missing (JS comment - OK)\n\t\t\t\tif (!uploadContainer || !fileInput || !fileStatusDisplaySpan || !overlay || !form) {\n\t\t\t\t\tconsole.error(\"Essential elements not found for PDF upload script. Script halted.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// --- Drag and Drop Event Handling --- (JS comment - OK)\n\t\t\t\tconst showOverlay = () => {\n\t\t\t\t\toverlay.classList.remove('hidden');\n\t\t\t\t\tvoid overlay.offsetWidth; // Force reflow (JS comment - OK)\n\t\t\t\t\toverlay.classList.add('opacity-100');\n\t\t\t\t}\n\n\t\t\t\tconst hideOverlay = () => {\n\t\t\t\t\toverlay.classList.remove('opacity-100');\n\t\t\t\t\toverlay.classList.add('opacity-0');\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\toverlay.classList.add('hidden');\n\t\t\t\t\t\toverlay.classList.remove('opacity-0'); // Reset (JS comment - OK)\n\t\t\t\t\t}, 200); // Match CSS transition (JS comment - OK)\n\t\t\t\t}\n\n\t\t\t\twindow.addEventListener('dragover', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tshowOverlay();\n\t\t\t\t}, false);\n\n\t\t\t\twindow.addEventListener('dragenter', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tshowOverlay();\n\t\t\t\t}, false);\n\n\t\t\t\twindow.addEventListener('dragleave', (e) => {\n\t\t\t\t\t// More reliable check for leaving window (JS comment - OK)\n\t\t\t\t\tif (!e.relatedTarget || !document.documentElement.contains(e.relatedTarget)) {\n                       hideOverlay();\n                    }\n\t\t\t\t}, false);\n\n\t\t\t\twindow.addEventListener('drop', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\thideOverlay();\n\n\t\t\t\t\tif (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n\t\t\t\t\t\tconst droppedFile = e.dataTransfer.files[0];\n\t\t\t\t\t\tif (droppedFile.type === \"application/pdf\") {\n\t\t\t\t\t\t\tfileInput.files = e.dataTransfer.files;\n\t\t\t\t\t\t\thandleFileSelection();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfileStatusDisplaySpan.textContent = 'Please drop a PDF file.';\n\t\t\t\t\t\t\tfileInput.value = ''; // Clear invalid selection (JS comment - OK)\n\t\t\t\t\t\t\tsetTimeout(() => {\n                               if (!fileInput.files || fileInput.files.length === 0) {\n\t\t\t\t\t\t\t\t   handleFileSelection(); // Reset text (JS comment - OK)\n                               }\n                           }, 3000);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\n\t\t\t\t// --- Click Event Handling --- (JS comment - OK)\n\t\t\t\tuploadContainer.addEventListener('click', (e) => {\n\t\t\t\t\tconst clickedElement = e.target;\n\t\t\t\t\t// Check if click is not on button/interactive elements (JS comment - OK)\n\t\t\t\t\tif (!clickedElement.closest('button') && !clickedElement.closest('form a') /* Add others if needed */) {\n\t\t\t\t\t\tfileInput.click();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// --- File Input Change Handling --- (JS comment - OK)\n\t\t\t\tfileInput.addEventListener('change', handleFileSelection, false);\n\n\t\t\t\t// --- Helper Function --- (JS comment - OK)\n\t\t\t\tfunction handleFileSelection() {\n\t\t\t\t\tif (fileInput.files && fileInput.files.length > 0) {\n\t\t\t\t\t\tfileStatusDisplaySpan.textContent = `Selected: ${fileInput.files[0].name}`;\n\t\t\t\t\t\tfileStatusDisplaySpan.classList.add('text-green-700');\n\t\t\t\t\t\tfileStatusDisplaySpan.classList.remove('text-gray-600');\n\t\t\t\t\t\t// Optional: Enable submit button (JS comment - OK)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfileStatusDisplaySpan.textContent = 'Click anywhere or drag & drop a PDF';\n\t\t\t\t\t\tfileStatusDisplaySpan.classList.remove('text-green-700');\n\t\t\t\t\t\tfileStatusDisplaySpan.classList.add('text-gray-600');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t})(); // IIFE (JS comment - OK)\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base("PDF Upload").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
