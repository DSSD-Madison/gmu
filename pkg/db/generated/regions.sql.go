// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: regions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findRegionByName = `-- name: FindRegionByName :one
SELECT id, name FROM regions WHERE LOWER(name) = LOWER($1) LIMIT 1
`

func (q *Queries) FindRegionByName(ctx context.Context, lower string) (Region, error) {
	row := q.db.QueryRowContext(ctx, findRegionByName, lower)
	var i Region
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertRegion = `-- name: InsertRegion :exec
INSERT INTO regions (id, name) VALUES ($1, $2)
`

type InsertRegionParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) InsertRegion(ctx context.Context, arg InsertRegionParams) error {
	_, err := q.db.ExecContext(ctx, insertRegion, arg.ID, arg.Name)
	return err
}

const listAllRegions = `-- name: ListAllRegions :many
SELECT id, name FROM regions ORDER BY name
`

func (q *Queries) ListAllRegions(ctx context.Context) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, listAllRegions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Region
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchRegionsByNamePrefix = `-- name: SearchRegionsByNamePrefix :many
SELECT
    id,
    name
FROM
    regions
WHERE
    name ILIKE $1 || '%'
ORDER BY
    name
    LIMIT 10
`

func (q *Queries) SearchRegionsByNamePrefix(ctx context.Context, dollar_1 sql.NullString) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, searchRegionsByNamePrefix, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Region
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
