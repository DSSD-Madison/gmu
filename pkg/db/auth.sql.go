// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: auth.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password_hash, is_master)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	IsMaster     bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.PasswordHash, arg.IsMaster)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, is_master, created_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.IsMaster,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, is_master FROM users ORDER BY username
`

type ListUsersRow struct {
	Username string
	IsMaster bool
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(&i.Username, &i.IsMaster); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
