package components

import (
	"encoding/json"
	"strconv"

	"github.com/DSSD-Madison/gmu/pkg/model/search"
)

func paginationJSON(page int) string {
	bytes, _ := json.Marshal(map[string]string{"page": strconv.Itoa(page)})
	return string(bytes)
}

templ Pagination(status search.PageStatus) {
	{{ maxPages := 5 }}
	// large screen pagination
	<div class="hidden sm:flex items-center justify-center p-4 mt-4 space-x-2 bg-gray-100 rounded-lg shadow dark:bg-gray-800">
		@prevButton(status)
		@paginationPages(status, maxPages)
		@nextButton(status)
	</div>
	// small screen pagination
	<div class="sm:hidden flex items-center justify-center p-4 mt-4 space-x-2 bg-gray-100 rounded-lg shadow dark:bg-gray-800">
		{{ maxPages = 3 }}
		@mobilePrevButton(status)
		@mobilePaginationPages(status, maxPages)
		@mobileNextButton(status)
	</div>
}

templ mobilePrevButton(status search.PageStatus) {
	if status.HasPrev {
		@mobilePaginationButton(paginationJSON(status.PrevPage)) {
			@leftChevron()
		}
	}
}

templ mobileNextButton(status search.PageStatus) {
	if status.HasNext {
		@mobilePaginationButton(paginationJSON(status.NextPage)) {
			@rightChevron()
		}
	}
}

templ mobilePaginationPages(status search.PageStatus, maxPages int) {
	{{ vm := getPaginationVM(status, maxPages) }}
	if vm.lower_overflow {
		@dots()
	}
	if vm.buttonCount < maxPages {
		for i := 0; i < vm.buttonCount; i++ {
			if i == status.CurrentPage {
				@currentPageButton(i)
			} else {
				@pageNumberButton(i)
			}
		}
	} else {
		for i := vm.lowerPage; i <= vm.upperPage; i++ {
			if i == status.CurrentPage {
				@currentPageButton(i)
			} else {
				@pageNumberButton(i)
			}
		}
	}
	if vm.upper_overflow {
		@dots()
	}
}

templ mobileCurrentPageButton(pageNum int) {
	<span
		class="px-4 py-2 text-white bg-blue-500 rounded dark:bg-blue-500 dark:text-white"
	>
		{ strconv.Itoa(pageNum) }
	</span>
}

templ paginationPages(status search.PageStatus, maxPages int) {
	{{ vm := getPaginationVM(status, maxPages) }}
	if vm.lower_overflow {
		@pageNumberButton(1)
		@dots()
	}
	if vm.buttonCount < maxPages {
		for i := 0; i < vm.buttonCount; i++ {
			if i == status.CurrentPage {
				@currentPageButton(i)
			} else {
				@pageNumberButton(i)
			}
		}
	} else {
		for i := vm.lowerPage; i <= vm.upperPage; i++ {
			if i == status.CurrentPage {
				@currentPageButton(i)
			} else {
				@pageNumberButton(i)
			}
		}
	}
	if vm.upper_overflow {
		@dots()
		@pageNumberButton(status.TotalPages)
	}
}

templ dots() {
	<span class="px-4 py-2 text-white bg-gray-200 rounded dark:bg-gray-800 dark:text-white">...</span>
}

templ currentPageButton(currentPage int) {
	<span
		class="px-4 py-2 text-white bg-blue-500 rounded dark:bg-blue-500 dark:text-white"
	>
		{ strconv.Itoa(currentPage) }
	</span>
}

templ pageNumberButton(pageNum int) {
	<button
		hx-get="/search"
		hx-push-url="true"
		hx-target="#results-and-pagination"
		hx-include="#searchbar, #sidecolumn"
		hx-vals={ paginationJSON(pageNum) }
		hx-swap="innerHTML"
		class="px-4 py-2 bg-gray-300 rounded cursor-pointer dark:bg-gray-700 dark:text-gray-200 hover:bg-gray-400 dark:hover:bg-gray-600"
	>
		{ strconv.Itoa(pageNum) }
	</button>
}

templ paginationButton(content string, json string) {
	<button
		hx-get="/search"
		hx-push-url="true"
		hx-target="#results-and-pagination"
		hx-include="#searchbar, #sidecolumn"
		hx-vals={ json }
		hx-swap="innerHTML"
		class="px-4 py-2 text-white bg-blue-500 rounded cursor-pointer hover:bg-blue-600"
	>
		{ content }
	</button>
}

templ mobilePaginationButton(json string) {
	<button
		hx-get="/search"
		hx-push-url="true"
		hx-target="#results-and-pagination"
		hx-include="#searchbar, #sidecolumn"
		hx-vals={ json }
		hx-swap="innerHTML"
		class="px-4 py-2 text-white bg-blue-500 rounded cursor-pointer hover:bg-blue-600"
	>
		{ children... }
	</button>
}

templ prevButton(status search.PageStatus) {
	if status.HasPrev {
		@paginationButton("Prev", paginationJSON(status.PrevPage))
	}
}

templ nextButton(status search.PageStatus) {
	if status.HasNext {
		@paginationButton("Next", paginationJSON(status.NextPage))
	}
}

templ leftChevron() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
		<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5"></path>
	</svg>
}

templ rightChevron() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
		<path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
	</svg>
}
