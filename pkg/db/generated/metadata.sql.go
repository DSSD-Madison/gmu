// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: metadata.sql

package db

import (
	"context"
)

const listAllAuthors = `-- name: ListAllAuthors :many
SELECT id, name FROM authors ORDER BY name
`

func (q *Queries) ListAllAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllCategories = `-- name: ListAllCategories :many
SELECT id, name FROM categories ORDER BY name
`

func (q *Queries) ListAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllKeywords = `-- name: ListAllKeywords :many
SELECT id, name FROM keywords ORDER BY name
`

func (q *Queries) ListAllKeywords(ctx context.Context) ([]Keyword, error) {
	rows, err := q.db.QueryContext(ctx, listAllKeywords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllRegions = `-- name: ListAllRegions :many
SELECT id, name FROM regions ORDER BY name
`

func (q *Queries) ListAllRegions(ctx context.Context) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, listAllRegions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Region
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
